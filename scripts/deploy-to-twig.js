import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const projectRoot = path.resolve(__dirname, '..')
const distPath = path.join(projectRoot, '.output', 'public')
const twigTemplatePath = path.resolve(projectRoot, '../../templates/landing/converter.html.twig')

console.log('üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ SSG —Å–±–æ—Ä–∫–∏ –≤ Twig —à–∞–±–ª–æ–Ω...')
console.log(`üìÅ –ü—É—Ç—å –∫ —Å–±–æ—Ä–∫–µ: ${distPath}`)
console.log(`üìÅ –ü—É—Ç—å –∫ Twig —à–∞–±–ª–æ–Ω—É: ${twigTemplatePath}`)

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–±–æ—Ä–∫–∏
if (!fs.existsSync(distPath)) {
  console.error('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–±–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ npm run build:ssg')
  process.exit(1)
}

// –ß–∏—Ç–∞–µ–º index.html –∏–ª–∏ 200.html –∏–∑ —Å–±–æ—Ä–∫–∏
let indexPath = path.join(distPath, 'index.html')
let indexContent

if (fs.existsSync(indexPath)) {
  indexContent = fs.readFileSync(indexPath, 'utf-8')
  console.log('üìÑ –ü—Ä–æ—á–∏—Ç–∞–Ω —Ñ–∞–π–ª index.html')
} else {
  // –ü—Ä–æ–±—É–µ–º 200.html (—Ñ–∞–π–ª –¥–ª—è SPA —Ä–µ–∂–∏–º–∞)
  indexPath = path.join(distPath, '200.html')
  if (!fs.existsSync(indexPath)) {
    console.error('‚ùå –ù–∏ index.html, –Ω–∏ 200.html –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–±–æ—Ä–∫–µ!')
    process.exit(1)
  }
  indexContent = fs.readFileSync(indexPath, 'utf-8')
  console.log('üìÑ –ü—Ä–æ—á–∏—Ç–∞–Ω —Ñ–∞–π–ª 200.html')
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º CSS —Ñ–∞–π–ª—ã
const cssMatches = indexContent.match(/<link[^>]+href="([^"]+\.css)"[^>]*>/g)
const cssFiles = []

if (cssMatches) {
  cssMatches.forEach(match => {
    const hrefMatch = match.match(/href="([^"]+)"/)
    if (hrefMatch) {
      let cssPath = hrefMatch[1]
      // –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /clamp/, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
      // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º /clamp/ –ø—Ä–µ—Ñ–∏–∫—Å
      if (!cssPath.startsWith('/clamp/')) {
        cssPath = '/clamp/' + cssPath.replace(/^\//, '')
      }
      cssFiles.push(cssPath)
      console.log(`üé® –ù–∞–π–¥–µ–Ω CSS: ${cssPath}`)
    }
  })
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º JS —Ñ–∞–π–ª—ã
const jsMatches = indexContent.match(/<script[^>]+src="([^"]+\.js)"[^>]*>/g)
const jsFiles = []

if (jsMatches) {
  jsMatches.forEach(match => {
    const srcMatch = match.match(/src="([^"]+)"/)
    if (srcMatch) {
      let jsPath = srcMatch[1]
      // –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /clamp/, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
      // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º /clamp/ –ø—Ä–µ—Ñ–∏–∫—Å
      if (!jsPath.startsWith('/clamp/')) {
        jsPath = '/clamp/' + jsPath.replace(/^\//, '')
      }
      jsFiles.push(jsPath)
      console.log(`üìú –ù–∞–π–¥–µ–Ω JS: ${jsPath}`)
    }
  })
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–∫–∂–µ —Å–∫—Ä–∏–ø—Ç —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Nuxt
const nuxtConfigMatch = indexContent.match(/<script>window\.__NUXT__[^<]*<\/script>/)
const nuxtConfigScript = nuxtConfigMatch ? nuxtConfigMatch[0] : ''

// –ò–∑–≤–ª–µ–∫–∞–µ–º data script
const nuxtDataMatch = indexContent.match(/<script[^>]*data-nuxt-data[^>]*>[^<]*<\/script>/)
const nuxtDataScript = nuxtDataMatch ? nuxtDataMatch[0] : ''

// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Twig —à–∞–±–ª–æ–Ω
const newTwigContent = `{% extends 'base.html.twig' %}

{% block title %}Clamp CSS Generator - –î–º–∏—Ç—Ä–∏–π –ß–µ–Ω–≥–∞–µ–≤{% endblock %}

{% block stylesheets %}
    {{ parent() }}
${cssFiles.map(css => `    <link rel="stylesheet" href="${css}">`).join('\n')}
{% endblock %}

{% block content %}
    <div id="__nuxt"></div>
    <div id="teleports"></div>
    ${nuxtDataScript}
    ${nuxtConfigScript}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
${jsFiles.map(js => `    <script type="module" crossorigin src="${js}"></script>`).join('\n')}
{% endblock %}
`

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Twig —à–∞–±–ª–æ–Ω
fs.writeFileSync(twigTemplatePath, newTwigContent)
console.log('‚úÖ Twig —à–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!')

// –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –≤ public/clamp
const publicClampPath = path.resolve(projectRoot, '../../public/clamp')

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é public/clamp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(publicClampPath)) {
  fs.mkdirSync(publicClampPath, { recursive: true })
  console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è public/clamp')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function copyDir(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true })
  }
  
  const files = fs.readdirSync(src)
  
  files.forEach(file => {
    const srcPath = path.join(src, file)
    const destPath = path.join(dest, file)
    const stat = fs.statSync(srcPath)
    
    if (stat.isDirectory()) {
      copyDir(srcPath, destPath)
    } else {
      fs.copyFileSync(srcPath, destPath)
    }
  })
}

// –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —Å–±–æ—Ä–∫–∏ (–∫—Ä–æ–º–µ HTML —Ñ–∞–π–ª–æ–≤)
const files = fs.readdirSync(distPath)
files.forEach(file => {
  if (file === 'index.html' || file === '200.html') return // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º HTML —Ñ–∞–π–ª—ã
  
  const srcPath = path.join(distPath, file)
  const destPath = path.join(publicClampPath, file)
  const stat = fs.statSync(srcPath)
  
  if (stat.isDirectory()) {
    copyDir(srcPath, destPath)
    console.log(`üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${file}`)
  } else {
    fs.copyFileSync(srcPath, destPath)
    console.log(`üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: ${file}`)
  }
})

console.log('‚ú® –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
console.log('\nüìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:')
console.log('   ‚Ä¢ –°–±–æ—Ä–∫–∞ Nuxt.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã')
console.log('   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Twig —à–∞–±–ª–æ–Ω–∞ converter.html.twig')
console.log('   ‚Ä¢ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ public/clamp/')
console.log('\nüéØ –¢–µ–ø–µ—Ä—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ Symfony —Ä–æ—É—Ç!')